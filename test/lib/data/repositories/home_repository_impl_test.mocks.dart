// Mocks generated by Mockito 5.4.4 from annotations
// in kebormed/test/lib/data/repositories/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:kebormed/core/network/network_info.dart' as _i3;
import 'package:kebormed/core/utils/factory_function.dart' as _i6;
import 'package:kebormed/data/datasource/home_datasource.dart' as _i4;
import 'package:kebormed/data/model/home_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
}

/// A class which mocks [HomeDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeDatasource extends _i1.Mock implements _i4.HomeDatasource {
  MockHomeDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<_i5.UserListModel>> getUserList() => (super.noSuchMethod(
        Invocation.method(
          #getUserList,
          [],
        ),
        returnValue:
            _i2.Future<List<_i5.UserListModel>>.value(<_i5.UserListModel>[]),
      ) as _i2.Future<List<_i5.UserListModel>>);

  @override
  _i2.Future<T> call<T>(_i6.FactoryFunction<_i2.Future<T>>? factoryFunction) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [factoryFunction],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #call,
                  [factoryFunction],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #call,
                [factoryFunction],
              ),
            ),
      ) as _i2.Future<T>);
}
