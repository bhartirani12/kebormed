// Mocks generated by Mockito 5.4.4 from annotations
// in kebormed/test/lib/data/datasource/home_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:kebormed/core/network/network_constants.dart' as _i6;
import 'package:kebormed/core/network/simple_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SimpleClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimpleClient extends _i1.Mock implements _i3.SimpleClient {
  MockSimpleClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  set baseUrl(String? _baseUrl) => super.noSuchMethod(
        Invocation.setter(
          #baseUrl,
          _baseUrl,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get reqMethodDelete => (super.noSuchMethod(
        Invocation.getter(#reqMethodDelete),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#reqMethodDelete),
        ),
      ) as String);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> get(
    Uri? url, {
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> post(
    Uri? url, {
    dynamic body,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<dynamic> delete(
    Uri? url, {
    dynamic body,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [NetworkConstants].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkConstants extends _i1.Mock implements _i6.NetworkConstants {
  MockNetworkConstants() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get prodUrl => (super.noSuchMethod(
        Invocation.getter(#prodUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#prodUrl),
        ),
      ) as String);

  @override
  String get devUrl => (super.noSuchMethod(
        Invocation.getter(#devUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#devUrl),
        ),
      ) as String);

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  String get userListEndPoint => (super.noSuchMethod(
        Invocation.getter(#userListEndPoint),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#userListEndPoint),
        ),
      ) as String);
}
